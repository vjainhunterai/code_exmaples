import os
import csv

class delimiterValidator:
    """
    Validates rows in a delimiter-separated file and separates them into valid and invalid rows.

    Attributes:
        input_file_path (str): Directory path of the input file.
        expected_columns (int): Expected number of columns in each row.
        delimiter (str): Delimiter used to separate columns in the file.
        valid_output_file_path (str): Directory path where valid output files will be saved.
        rejected_output_file_path (str): Directory path where rejected output files will be saved.
    """

    def __init__(self, input_file_path, expected_columns, delimiter, valid_output_file_path, rejected_output_file_path):
        """
        Initializes the DelimiterValidator with paths, expected column count, and delimiter.

        Args:
            input_file_path (str): Directory path of the input file.
            expected_columns (int): Expected number of columns in each row.
            delimiter (str): Delimiter used to separate columns in the file.
            valid_output_file_path (str): Directory path where valid output files will be saved.
            rejected_output_file_path (str): Directory path where rejected output files will be saved.
        """
        self.input_file_path = input_file_path
        self.expected_columns = expected_columns
        self.delimiter = delimiter
        self.valid_output_file_path = valid_output_file_path
        self.rejected_output_file_path = rejected_output_file_path

        # Ensure the output directories exist, create them if necessary
        os.makedirs(self.valid_output_file_path, exist_ok=True)
        os.makedirs(self.rejected_output_file_path, exist_ok=True)

    def validate_row(self, row: str) -> bool:
        """
        Validates a single row by counting delimiters outside of quoted text.

        Args:
            row (str): The row of data as a string.

        Returns:
            bool: True if the row is valid (correct number of columns), False otherwise.
        """
        reader = csv.reader([row], delimiter=self.delimiter, quotechar='"')
        try:
            row_data = next(reader)
        except StopIteration:
            return False

        return len(row_data) == self.expected_columns

    def process_file(self, input_file_name):
        """
        Processes the input file, separating valid and invalid rows into separate output files.
        """
        valid_rows = []
        invalid_rows = []

        input_file = os.path.join(self.input_file_path, input_file_name)
        valid_output_file = os.path.join(self.valid_output_file_path, f"valid_{input_file_name}")
        rejected_output_file = os.path.join(self.rejected_output_file_path, f"rejected_{input_file_name}")

        # Ensure the input file exists before processing
        if not os.path.exists(input_file):
            raise FileNotFoundError(f"Input file not found: {input_file}")

        try:
            with open(input_file, 'r') as file:
                for line in file:
                    if self.validate_row(line):
                        valid_rows.append(line)
                    else:
                        invalid_rows.append(line)
        except IOError as e:
            raise Exception(f"Error reading file: {input_file}. Error: {e}")

        try:
            with open(valid_output_file, 'w') as valid_file:
                valid_file.writelines(valid_rows)
        except IOError as e:
            raise Exception(f"Error writing to file: {valid_output_file}. Error: {e}")

        try:
            with open(rejected_output_file, 'w') as rejected_file:
                rejected_file.writelines(invalid_rows)
        except IOError as e:
            raise Exception(f"Error writing to file: {rejected_output_file}. Error: {e}")

        print(f"Valid rows written to: {valid_output_file}")
        print(f"Invalid rows written to: {rejected_output_file}")


# Example usage:
try:
    validator = delimiterValidator(
        input_file_path='C:\\Users\\jvineet\\PycharmProjects\\PythonLearnings\\Data\\processed\\LA_processed\\',          # Directory of the input file
        expected_columns=46,                        # Expected number of columns
        delimiter=',',                             # Delimiter used in the file
        valid_output_file_path='C:\\Users\\jvineet\\PycharmProjects\\PythonLearnings\\Data\\processed\\ValidFiles\\',  # Directory for valid output files
        rejected_output_file_path='C:\\Users\\jvineet\\PycharmProjects\\PythonLearnings\\Data\\processed\\RejectedFiles\\'  # Directory for rejected output files
    )

    # Get a list of all files in the input directory
    files = [f for f in os.listdir(validator.input_file_path) if os.path.isfile(os.path.join(validator.input_file_path, f))]

    # Process each file
    for file in files:
        validator.process_file(file)

except Exception as e:
    print(f"An error occurred: {e}")
