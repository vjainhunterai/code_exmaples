from airflow import DAG
from airflow.operators.bash_operator import BashOperator
from airflow.operators.python_operator import PythonOperator
from datetime import datetime, timedelta
import subprocess

# Default arguments for the DAG
default_args = {
    'owner': 'airflow',
    'depends_on_past': False,
    'start_date': datetime(2024, 1, 1),
    'email_on_failure': False,
    'email_on_retry': False,
    'retries': 1,
    'retry_delay': timedelta(minutes=5),
}

# Initialize the DAG with no schedule (manual trigger only)
dag = DAG(
    'data_engineering_job',
    default_args=default_args,
    description='Clone GitHub repo, execute the main data engineering job',
    schedule_interval=None,  # No automatic schedule, manual trigger
)

# Step 1: Remove existing repo and clone GitHub repository
clone_repo = BashOperator(
    task_id='clone_repo',
    bash_command="""
    cd /home/ubuntu &&
    if [ -d "dev_python" ]; then 
        rm -rf dev_python;
        echo "Existing repository removed.";
    fi &&
    git clone https://vjainhunterai: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@github.com/vjainhunterai/dev_python.git &&
    echo "Repository cloned successfully."
    """,
    dag=dag,
)

# Step 2: Pull the latest code if the repo already exists
pull_latest_code = BashOperator(
    task_id='pull_latest_code',
    bash_command='cd /home/ubuntu/dev_python && git pull',
    dag=dag,
)

# Step 3: Execute the main Python script for the data engineering job
def run_data_engineering_job():
    try:
        # Trigger the l2Job.py script
        subprocess.run(["python3", "/home/ubuntu/dev_python/src/l2Code_etl/l2Job.py"], check=True)
        print("Data engineering job executed successfully.")
    except subprocess.CalledProcessError as e:
        print(f"Error while running data engineering job: {e}")
        raise

execute_main_job = PythonOperator(
    task_id='execute_main_job',
    python_callable=run_data_engineering_job,
    dag=dag,
)

# Define task dependencies
clone_repo >> execute_main_job
