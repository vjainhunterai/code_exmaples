import pandas as pd
from sqlalchemy import create_engine, text
from sqlalchemy.orm import sessionmaker
from sqlalchemy.exc import SQLAlchemyError
from datetime import datetime
import os
import time


class databaseHandler:
    def __init__(self, dbUrl):
        self.engine = create_engine(dbUrl)
        self.connection = self.engine.connect()
        self.metadata = None
        print("Initializing session...")
        Session = sessionmaker(bind=self.engine)
        self.session = Session()

    def close(self):
        print("Closing the session and connection...")
        self.session.close()
        self.connection.close()


def create_connection(dbUrl):
    """
    Reusing the databaseHandler class for connection handling.
    """
    try:
        db_handler = databaseHandler(dbUrl)
        print("Database connection established.")
        return db_handler
    except SQLAlchemyError as e:
        print(f"Error creating database connection: {e}")
        raise


def read_metadata(l3MetadataTable, l3metadb, engine):
    try:
        l3_metaquery = f"SELECT * FROM {l3metadb}.{l3MetadataTable}"
        df_metadata = pd.read_sql_query(l3_metaquery, engine)
        print("Metadata successfully retrieved from the database.")
        return df_metadata.set_index('key')['value'].to_dict()
    except SQLAlchemyError as e:
        print(f"Error reading metadata: {e}")
        raise


def fetch_all_sql_queries(session, query_meta_table, ctxArea):
    try:
        result = session.execute(
            text(f"SELECT ctxval, remarks FROM {query_meta_table} WHERE ctxarea='{ctxArea}' ORDER BY ctxkey"))
        print("SQL queries successfully fetched from the metadata table.")
        return result.fetchall()
    except SQLAlchemyError as e:
        print(f"Error fetching SQL queries: {e}")
        raise


def read_l2_audit_table(l2AuditTable, l2dbname, engine):
    try:
        query = f"SELECT DISTINCT upper(Customer_Name) AS Customer_Name, cast(L2_load_date AS date) AS L2_load_date FROM {l2dbname}.{l2AuditTable} GROUP BY upper(Customer_Name), L1_load_date, cast(L2_load_date AS date)"
        df = pd.read_sql_query(query, engine)
        print("L2 Audit table data successfully retrieved.")
        return df
    except SQLAlchemyError as e:
        print(f"Error reading L2 Audit table: {e}")
        raise


def read_l3_audit_table(l3AuditTable, l3dbname, engine):
    try:
        query = f"SELECT DISTINCT upper(Customer_Name) AS Customer_Name, cast(L2_load_date AS date) AS L2_load_date FROM {l3dbname}.{l3AuditTable} GROUP BY upper(Customer_Name), cast(L2_load_date AS date)"
        df = pd.read_sql_query(query, engine)
        print("L3 Audit table data successfully retrieved.")
        return df
    except SQLAlchemyError as e:
        print(f"Error reading L3 Audit table: {e}")
        raise


def delta_cust_details(df1, df2):
    try:
        merge_df = df1.merge(df2, on=['Customer_Name', 'L2_load_date'], how='left', indicator=True)
        delta_df = merge_df[merge_df['_merge'] == 'left_only'].drop(columns=['_merge'])
        print("Delta between L2 and L3 data successfully calculated.")
        return delta_df
    except Exception as e:
        print(f"Error calculating delta: {e}")
        raise


def l3Audit_cnt(srcDb, targetDb, srcTable, targetTable, Customer_Name, LoadDate, l3_dimdb, partty_group_table, engine):
    try:
        src_qury = f"SELECT count(*) FROM {srcDb}.{srcTable} WHERE invhdrNameCustomer='{Customer_Name}' AND load_date='{LoadDate}'"
        print(f"Source Query: {src_qury}")
        tsrc_cnt = pd.read_sql_query(src_qury, engine)
        src_cnt = tsrc_cnt.iloc[0, 0]

        party_query = f"SELECT PARTY_GROUP_KEY FROM {l3_dimdb}.{partty_group_table} WHERE PARTY_GROUP_NAME=upper('{Customer_Name}')"
        print(f"Party Query: {party_query}")
        tparty_key = pd.read_sql_query(party_query, engine)
        partty_group_key = tparty_key.iloc[0, 0]

        trgt_qury = f"SELECT count(*) FROM {targetDb}.{targetTable} WHERE PARTY_GROUP_KEY={partty_group_key} AND LOAD_DATE='{LoadDate}'"
        print(f"Target Query: {trgt_qury}")
        ttrgt_cnt = pd.read_sql_query(trgt_qury, engine)
        trgt_cnt = ttrgt_cnt.iloc[0, 0]

        print(f"L3 Source Count: {src_cnt}, Target Count: {trgt_cnt}")
        return src_cnt, trgt_cnt
    except Exception as e:
        print(f"Error executing count queries: {e}")
        raise


def execute_sql(session, sql_query, variables=None):
    try:
        query = text(sql_query)
        print(f"Executing SQL Query: {sql_query} with variables: {variables}")
        session.execute(query, variables or {})
        session.commit()
        print("SQL Query executed successfully.")
        return 'SUCCESS', None
    except SQLAlchemyError as e:
        session.rollback()
        error_mesg = str(e)
        print(f"Error executing SQL query: {e}")
        return 'FAIL', error_mesg


def l3Execution():
    """
    Main execution function that coordinates reading metadata, fetching SQL queries, calculating deltas,
    and executing the queries for each set of variables for L3.
    """
    try:
        # Create database session and engine
        dbUrl = 'mysql+mysqlconnector://test:Gpohealth!#!@dev-db-test.c969yoyq9cyy.us-east-1.rds.amazonaws.com/stg_tbl'
        db_handler = create_connection(dbUrl)

        # Reading parameters from the metadata table
        l3MetadataTable = "prod_context_l2_l3_python"
        meta_db_name = "stg_tbl"
        meta_l3_keys = read_metadata(l3MetadataTable, meta_db_name, db_handler.engine)

        # Extract relevant parameters from the metadata
        srcTable = meta_l3_keys["L2_Inv_Table"]
        l2AuditTable = meta_l3_keys["L2_Audit_Table"]
        l2_auditdb = meta_l3_keys["L2_Audit_Db"]
        l3AuditTable = meta_l3_keys["L3_Audit_Table"]
        L3_Audit_Db = meta_l3_keys["L3_Audit_Db"]
        srcDb = meta_l3_keys["L2_Server_Database"]
        targetDb = meta_l3_keys["L3_Server_Database"]
        targetTable = meta_l3_keys["L3_Inv_Table"]
        query_meta_table = meta_l3_keys["L3_Query_Metadata"]
        ctxArea = meta_l3_keys["L3_ctxarea"]
        l3_dimdb = meta_l3_keys["dim_db"]
        partty_group_table = meta_l3_keys["Dim_Party_Table"]

        # Fetch all SQL queries in the correct order
        sql_queries = fetch_all_sql_queries(db_handler.session, query_meta_table, ctxArea)

        # Read data from L2 Audit and L3 Audit tables
        df1 = read_l2_audit_table(l2AuditTable, l2_auditdb, db_handler.engine)
        df2 = read_l3_audit_table(l3AuditTable, L3_Audit_Db, db_handler.engine)

        # Calculate the delta between L2 and L3 data
        df_delta = delta_cust_details(df1, df2)
        print(f"Delta DataFrame: {df_delta}")

        # For each set of variables in the delta DataFrame, execute the SQL queries
        for index, row in df_delta.iterrows():
            variables = {
                "context_customer": row['Customer_Name'],
                "context_l2_date": row['L2_load_date']
            }
            customer_name = variables['context_customer']
            L2_load_date = variables['context_l2_date']

            # Execute each SQL query with the current variable set
            for sql_row in sql_queries:
                sql_query = sql_row[0]  # Extract the SQL query from the row
                print(f"Executing SQL for Customer: {customer_name} on L2 Load Date: {L2_load_date}")
                execute_sql(db_handler.session, sql_query, variables)

                # Get source and target counts for auditing
                Source_Count, Target_count = l3Audit_cnt(srcDb, targetDb, srcTable, targetTable, customer_name,
                                                         L2_load_date, l3_dimdb, partty_group_table, db_handler.engine)

                # Log audit information
                audit_entry = {
                    'Job_ID': "1234",  # Example Job ID, this can be dynamic
                    'Job_Name': "L3_Load",
                    'Customer_Name': customer_name,
                    'Flow_Type': "Direct",
                    'Operation_type': "L3_Audit",
                    'Source_Count': int(Source_Count),
                    'Target_count': int(Target_count),
                    'New_rcrd_count': 0,  # Example, this can be dynamic based on query result
                    'update_rcrd_count': 0,  # Example, this can be dynamic based on query result
                    'Start_Time': datetime.now(),
                    'End_Time': datetime.now(),
                    'Status': "SUCCESS",
                    'Insert_By': os.getlogin(),
                    'Error_desc': "",
                    'L2_load_date': L2_load_date,
                    'L3_load_date': datetime.now()  # Assuming the L3 load date is the current execution time
                }
                print(f"Inserting L3 Audit Entry: {audit_entry}")
                # Example function to insert audit entry (ensure you implement a method similar to insertL2AuditEntry)
                db_handler.session.execute(
                    text(f"""
                    INSERT INTO l3_audit_data (Job_ID, Job_Name, Customer_Name, Flow_Type, Operation_type, 
                    Source_Count, Target_count, New_rcrd_count, update_rcrd_count, Start_Time, End_Time, Status, 
                    Insert_By, Error_desc, L2_load_date, L3_load_date) 
                    VALUES (:Job_ID, :Job_Name, :Customer_Name, :Flow_Type, :Operation_type, :Source_Count, 
                    :Target_count, :New_rcrd_count, :update_rcrd_count, :Start_Time, :End_Time, :Status, 
                    :Insert_By, :Error_desc, :L2_load_date, :L3_load_date)
                    """), audit_entry)
                db_handler.session.commit()
                print("L3 Audit entry committed.")

        # Close the database connection after execution
        db_handler.close()

    except Exception as e:
        print(f"Error in main L3 execution: {e}")
        raise


if __name__ == "__main__":
    l3Execution()
