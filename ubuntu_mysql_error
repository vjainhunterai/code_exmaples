(pyeng) ubuntu@i-0f425bb12c09f2af3:~$ python3 l2Job.py
Error in main execution: No module named 'mysql'
Traceback (most recent call last):
  File "/home/ubuntu/l2Job.py", line 227, in <module>
    l2Execution()
  File "/home/ubuntu/l2Job.py", line 149, in l2Execution
    db_handler = create_connection(dbUrl)
  File "/home/ubuntu/l2Job.py", line 65, in create_connection
    db_handler = databaseHandler(dbUrl)
  File "/home/ubuntu/l2Job.py", line 11, in __init__
    self.engine = create_engine(dbUrl)
  File "<string>", line 2, in create_engine
  File "/home/ubuntu/pyeng/lib/python3.10/site-packages/sqlalchemy/util/deprecations.py", line 281, in warned
    return fn(*args, **kwargs)  # type: ignore[no-any-return]
  File "/home/ubuntu/pyeng/lib/python3.10/site-packages/sqlalchemy/engine/create.py", line 599, in create_engine
    dbapi = dbapi_meth(**dbapi_args)
  File "/home/ubuntu/pyeng/lib/python3.10/site-packages/sqlalchemy/dialects/mysql/mysqlconnector.py", line 83, in import_dbapi
    from mysql import connector
ModuleNotFoundError: No module named 'mysql'


===================


(airflow_venv) ubuntu@i-0f425bb12c09f2af3:~$ pip install pandas
Requirement already satisfied: pandas in ./airflow_venv/lib/python3.10/site-packages (2.2.2)
Requirement already satisfied: numpy>=1.22.4 in ./airflow_venv/lib/python3.10/site-packages (from pandas) (2.1.1)
Requirement already satisfied: tzdata>=2022.7 in ./airflow_venv/lib/python3.10/site-packages (from pandas) (2024.1)
Requirement already satisfied: python-dateutil>=2.8.2 in ./airflow_venv/lib/python3.10/site-packages (from pandas) (2.8.2)
Requirement already satisfied: pytz>=2020.1 in ./airflow_venv/lib/python3.10/site-packages (from pandas) (2023.3)
Requirement already satisfied: six>=1.5 in ./airflow_venv/lib/python3.10/site-packages (from python-dateutil>=2.8.2->pandas) (1.16.0)

[notice] A new release of pip is available: 23.0.1 -> 24.2
[notice] To update, run: pip install --upgrade pip
(airflow_venv) ubuntu@i-0f425bb12c09f2af3:~$ python3 l2Job.py
Traceback (most recent call last):
  File "/home/ubuntu/l2Job.py", line 4, in <module>
    from pandas import pandas as pd
ModuleNotFoundError: No module named 'pandas'


===================


from airflow import DAG
from airflow.operators.bash import BashOperator
from datetime import datetime

# Define the DAG
default_args = {
    'owner': 'airflow',
    'start_date': datetime(2024, 9, 20),
}

with DAG('trigger_external_python_env', default_args=default_args, schedule_interval=None) as dag:

    run_script_in_venv = BashOperator(
        task_id='run_python_script_in_venv',
        bash_command="""
        source /home/ubuntu/pyeng/bin/activate && \
        python /path/to/your_script.py
        """,
    )




from airflow import DAG
from airflow.operators.bash_operator import BashOperator
from airflow.operators.python_operator import PythonOperator
from datetime import datetime, timedelta
import subprocess

# Default arguments for the DAG
default_args = {
    'owner': 'airflow',
    'depends_on_past': False,
    'start_date': datetime(2024, 1, 1),
    'email_on_failure': False,
    'email_on_retry': False,
    'retries': 1,
    'retry_delay': timedelta(minutes=5),
}

# Initialize the DAG
dag = DAG(
    'data_engineering_job',
    default_args=default_args,
    description='Pull code from GitHub and execute the main data engineering job',
    schedule_interval=None,
)

# Step 1: Clone GitHub repository
clone_repo = BashOperator(
    task_id='clone_repo',
    bash_command="""
    cd /home/ubuntu &&
    if [ -d "dev_python" ]; then
       rm -rf dev_python;
       echo "Existing repository removed.";
    fi &&
    git clone https://vjainhunterai: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@github.com/vjainhunterai/dev_python.git  &&
    echo "Repository cloned successfully."
    """,
    dag=dag,
)

# Step 2: Pull the latest code if repo already exists
pull_latest_code = BashOperator(
    task_id='pull_latest_code',
    bash_command='cd /home/ubuntu/dev_python && git pull',
    dag=dag,
)

# Step 3: Execute the main Python script for data engineering job
def run_data_engineering_job():
    try:
        # Trigger the l2Job.py script
        subprocess.run(["python3", "/home/ubuntu/dev_python/src/l2Code_etl/l2Job.py"], check=True)
        print("Data engineering job executed successfully.")
    except subprocess.CalledProcessError as e:
        print(f"Error while running data engineering job: {e}")
        raise

execute_main_job = PythonOperator(
    task_id='execute_main_job',
    python_callable=run_data_engineering_job,
    dag=dag,
)

# Define task dependencies
clone_repo >> pull_latest_code >> execute_main_job


=======================


from airflow import DAG
from airflow.operators.bash_operator import BashOperator
from airflow.operators.python_operator import PythonOperator
from datetime import datetime, timedelta
import subprocess

# Default arguments for the DAG
default_args = {
    'owner': 'airflow',
    'depends_on_past': False,
    'start_date': datetime(2024, 1, 1),
    'email_on_failure': False,
    'email_on_retry': False,
    'retries': 1,
    'retry_delay': timedelta(minutes=5),
}

# Initialize the DAG
dag = DAG(
    'data_engineering_job',
    default_args=default_args,
    description='Pull code from GitHub and execute the main data engineering job',
    schedule_interval=None,
)

# Step 1: Clone GitHub repository
clone_repo = BashOperator(
    task_id='clone_repo',
    bash_command="""
    cd /home/ubuntu &&
    if [ -d "dev_python" ]; then
       rm -rf dev_python;
       echo "Existing repository removed.";
    fi &&
    git clone https://vjainhunterai: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@github.com/vjainhunterai/dev_python.git  &&
    echo "Repository cloned successfully."
    """,
    dag=dag,
)

# Step 2: Pull the latest code if repo already exists
pull_latest_code = BashOperator(
    task_id='pull_latest_code',
    bash_command='cd /home/ubuntu/dev_python && git pull',
    dag=dag,
)

# Step 3: Execute the main Python script for data engineering job
def run_data_engineering_job():
    try:
        # Activate the virtual environment and run the script
        subprocess.run(
            ["bash", "-c", "source /home/ubuntu/airflow_venv/bin/activate && python /home/ubuntu/dev_python/src/l2Code_etl/l2Job.py"],
            check=True
        )
        print("Data engineering job executed successfully.")
    except subprocess.CalledProcessError as e:
        print(f"Error while running data engineering job: {e}")
        raise

# Step 3: Execute the main Python job using PythonOperator
execute_main_job = PythonOperator(
    task_id='execute_main_job',
    python_callable=run_data_engineering_job,
    dag=dag,
)

# Define task dependencies
clone_repo >> pull_latest_code >> execute_main_job




