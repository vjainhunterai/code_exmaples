from datetime import datetime
from sqlalchemy import create_engine, Table, Column, Integer, String, MetaData, DateTime
from sqlalchemy.orm import sessionmaker
import logging

# Enable SQLAlchemy logging
logging.basicConfig()
logging.getLogger('sqlalchemy.engine').setLevel(logging.INFO)

class databaseHandler:
    def __init__(self, dbUrl):
        self.engine = create_engine(dbUrl)
        self.connection = self.engine.connect()
        self.metadata = MetaData()

        print("Creating tables if they do not exist...")
        self.logTable = Table('etl_log_final', self.metadata,
                              Column('id', Integer, primary_key=True, autoincrement=True),
                              Column('exec_id', String(19)),
                              Column('job_name', String(255)),
                              Column('step_name', String(255)),
                              Column('start_time', DateTime),
                              Column('end_time', DateTime),
                              Column('status', String(50)),
                              Column('message', String(255)),
                              Column('timestamp', DateTime, default=datetime.now))

        self.auditTable = Table('etl_audit_final', self.metadata,
                                Column('exec_id', String(19), primary_key=True),
                                Column('job_name', String(255)),
                                Column('file_name', String(500)),
                                Column('start_time', DateTime),
                                Column('end_time', DateTime),
                                Column('src_cnt', Integer),
                                Column('tgt_cnt', Integer),
                                Column('lkp_cnt', Integer),
                                Column('rej_cnt', Integer),
                                Column('job_status', String(255)),
                                Column('crt_dttm', DateTime, default=datetime.now))
        
        self.metadata.create_all(self.engine)  # Create tables

        print("Initializing session...")
        Session = sessionmaker(bind=self.engine)
        self.session = Session()

    def insertLogEntry(self, logEntry):
        try:
            print(f"Inserting log entry: {logEntry}")
            ins = self.logTable.insert().values(logEntry)
            self.session.execute(ins)
            self.session.commit()
            print("Log entry committed.")
        except Exception as e:
            print(f"Error inserting log record: {e}")
            self.session.rollback()

    def insertAuditEntry(self, auditEntry):
        try:
            print(f"Inserting audit entry: {auditEntry}")
            ins = self.auditTable.insert().values(auditEntry)
            self.session.execute(ins)
            self.session.commit()
            print("Audit entry committed.")
        except Exception as e:
            print(f"Error inserting audit record: {e}")
            self.session.rollback()

    def close(self):
        print("Closing the session and connection...")
        self.session.close()
        self.connection.close()

class stepLogger:
    def __init__(self, dbHandler):
        self.dbHandler = dbHandler

    def logStep(self, execId, jobName, stepName, startTime, endTime, status, message):
        logEntry = {
            'exec_id': execId,
            'job_name': jobName,
            'step_name': stepName,
            'start_time': startTime,
            'end_time': endTime,
            'status': status,
            'message': message,
            'timestamp': datetime.now()
        }
        self.dbHandler.insertLogEntry(logEntry)

class auditLogger:
    def __init__(self, dbHandler):
        self.dbHandler = dbHandler

    def logAudit(self, auditEntry):
        self.dbHandler.insertAuditEntry(auditEntry)

if __name__ == "__main__":
    dbUrl = "mysql+pymysql://admin:Gpoproddb!#!@prod-db.c969yoyq9cyy.us-east-1.rds.amazonaws.com:3306/stg_tbl"
    dbHandler = databaseHandler(dbUrl)
    step_logger = stepLogger(dbHandler)
    audit_logger = auditLogger(dbHandler)

    exec_id = "1234567890123456789"

    # Debugging print before logging
    print("Logging ETL step...")

    step_logger.logStep(
        execId=exec_id,
        jobName="ETL Job",
        stepName="Extract Data",
        startTime=datetime.now(),
        endTime=datetime.now(),
        status="Success",
        message="Data extracted successfully"
    )

    print("ETL step logged.")

    print("Logging audit entry...")

    audit_entry = {
        'exec_id': exec_id,
        'job_name': "ETL Job",
        'file_name': "data.csv",
        'start_time': datetime.now(),
        'end_time': datetime.now(),
        'src_cnt': 100,
        'tgt_cnt': 95,
        'lkp_cnt': 5,
        'rej_cnt': 0,
        'job_status': "Success",
        'crt_dttm': datetime.now()
    }

    audit_logger.logAudit(audit_entry)

    print("Audit entry logged.")

    dbHandler.close()
