CREATE TABLE sql_queries (
    id INT AUTO_INCREMENT PRIMARY KEY,
    query TEXT,
    sequence_number INT,
    description VARCHAR(255)
);



from sqlalchemy import create_engine, text
from sqlalchemy.orm import sessionmaker

# Database connection
def create_connection():
    engine = create_engine("mysql+mysqlconnector://your_user:your_password@your_host/your_database")
    Session = sessionmaker(bind=engine)
    return Session()

# Fetch all SQL queries ordered by sequence number
def fetch_all_sql_queries(session):
    result = session.execute(text("SELECT query FROM sql_queries ORDER BY sequence_number ASC"))
    return result.fetchall()

# Execute the SQL query with optional variables
def execute_sql(session, sql_query, variables=None):
    query = text(sql_query)
    result = session.execute(query, variables or {})
    return result.fetchall()

# Main execution
def main():
    # Example: Dictionary of possible variables (adjust per your specific queries)
    variables = {
        "variable1": "value1",
        "variable2": "value2"
        # Add more variables as needed, or leave some out if not required
    }

    # Create database session
    session = create_connection()

    # Fetch all SQL queries in the correct order
    sql_queries = fetch_all_sql_queries(session)

    # Execute each SQL query in sequence
    for sql_row in sql_queries:
        sql_query = sql_row[0]

        # Determine which variables are needed by this query
        required_variables = {key: variables[key] for key in variables if f":{key}" in sql_query}

        # Execute the SQL query
        results = execute_sql(session, sql_query, required_variables)
        print(f"Executed SQL: {sql_query}")
        for row in results:
            print(row)

    # Close the session
    session.close()

if __name__ == "__main__":
    main()



SELECT * FROM employees WHERE department = :department; with sequence number 1
SELECT * FROM employees WHERE salary > :min_salary; with sequence number 2
SELECT * FROM departments; with sequence number 3


