import os
import shutil
import pandas as pd
from sqlalchemy import create_engine, MetaData, Table
from sqlalchemy.orm import sessionmaker
from datetime import datetime

# Class for handling schema validation
class SchemaValidator:
    def __init__(self, dbUrl):
        self.engine = create_engine(dbUrl)
        self.Session = sessionmaker(bind=self.engine)
        self.metadata = MetaData()

    def getSchemaFromDb(self, schemaTable, tableName):
        session = self.Session()
        try:
            schema_table = Table(schemaTable, self.metadata, autoload_with=self.engine)
            query = session.query(schema_table.c.Column_name).filter_by(table_name=tableName)
            df_schema = pd.read_sql(query.statement, session.bind)
            if not df_schema.empty:
                schema = df_schema.iloc[0]['Column_name'].split('|')
            else:
                schema = None
            return schema
        except Exception as e:
            print(f"Error fetching schema from database: {e}")
            return None
        finally:
            session.close()

    def getFileHeader(self, filePath, delimiter):
        try:
            df = pd.read_csv(filePath, delimiter=delimiter, nrows=0)
            return df.columns.tolist()
        except Exception as e:
            print(f"Error reading file header: {e}")
            return []

    def validateSchema(self, schemaTable, tableName, filePath, delimiter):
        schema = self.getSchemaFromDb(schemaTable, tableName)
        if not schema:
            return False, f"No schema found for table '{tableName}'."

        header = self.getFileHeader(filePath, delimiter)
        if not header:
            return False, "Failed to read the file header."

        is_match, report = self.compareSchemaAndHeader(schema, header)
        return is_match, report

    def compareSchemaAndHeader(self, schema, header):
        try:
            if schema == header:
                return True, "Schema matches the file header."
            else:
                schema_set = set(schema)
                header_set = set(header)
                missing_columns = schema_set - header_set
                extra_columns = header_set - schema_set
                report = "Schema does not match the file header.\n"
                if missing_columns:
                    report += f"Missing columns: {', '.join(missing_columns)}\n"
                if extra_columns:
                    report += f"Extra columns: {', '.join(extra_columns)}\n"
                return False, report
        except Exception as e:
            print(f"Error comparing schema and header: {e}")
            return False, "Error during schema comparison."

# Main program logic
def main():
    # Database URL and other parameters
    dbUrl1 = "mysql+pymysql://admin:Gpoproddb!#!@prod-db.c969yoyq9cyy.us-east-1.rds.amazonaws.com/joblog_metadata"
    tableName = 'AP'
    schemaTable = 'Table_Schema'
    directory_path = 'C:\\Users\\jvineet\\PycharmProjects\\PythonLearnings\\Data\\processed\\processed_source\\AP'
    rejection_directory = 'C:\\Users\\jvineet\\PycharmProjects\\PythonLearnings\\Data\\processed\\processed_rejection\\AP'
    delimiter = '|'  # Set your delimiter
    exec_id = "your_execution_id"  # Assume this is provided
    step_logger = "your_step_logger_instance"  # Assume this is an initialized instance of your logger

    # Initialize the schema validator
    schema_validator = SchemaValidator(dbUrl1)

    # Process each file in the directory
    os.makedirs(rejection_directory, exist_ok=True)

    start_time = datetime.now()
    total_source_record_count = 0
    results = []

    for filename in os.listdir(directory_path):
        filePath = os.path.join(directory_path, filename)

        if os.path.isfile(filePath):
            # Calculate the source record count (excluding header)
            source_record_count = sum(1 for _ in open(filePath)) - 1
            total_source_record_count += source_record_count

            # Validate the schema
            is_valid, validation_report = schema_validator.validateSchema(schemaTable, tableName, filePath, delimiter)
            if is_valid:
                results.append((filename, 1, source_record_count))  # 1 indicates success
            else:
                rejectionFilePath = os.path.join(rejection_directory, filename)
                shutil.copy(filePath, rejectionFilePath)
                results.append((filename, 0, source_record_count))  # 0 indicates failure
                print(f"Schema validation failed for file '{filename}': {validation_report}")
        else:
            results.append((filename, -2, 0))  # -2 indicates non-file

    end_time = datetime.now()

    # Logging the results using step_logger
    for file, status, record_count in results:
        if status == 1:
            job_status = "Success"
            tgt_cnt = record_count
            rej_cnt = 0
        elif status == 0:
            job_status = "Failed"
            tgt_cnt = 0
            rej_cnt = record_count
        elif status == -1:
            job_status = "Error"
            tgt_cnt = 0
            rej_cnt = 0
        else:
            job_status = "Skipped"
            tgt_cnt = 0
            rej_cnt = 0

        step_logger.logStep(
            execId=exec_id,
            jobName="Schema Validation",
            fileName=file,
            startTime=start_time,
            endTime=end_time,
            srcCnt=total_source_record_count,
            tgtCnt=tgt_cnt,
            lkpCnt=0,
            rejCnt=rej_cnt,
            jobStatus=job_status
        )

    # Print or log your results
    print(f"Validation completed in {end_time - start_time}")
    print("Results:")
    for filename, status in results:
        status_str = "Success" if status == 1 else "Failed" if status == 0 else "Skipped"
        print(f"File: {filename}, Status: {status_str}")

if __name__ == "__main__":
    main()
